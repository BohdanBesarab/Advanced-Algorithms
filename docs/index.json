{
  "api/Advanced.Algorithms.Binary.BaseConversion.html": {
    "href": "api/Advanced.Algorithms.Binary.BaseConversion.html",
    "title": "Class BaseConversion | Advanced Algorithms",
    "keywords": "Class BaseConversion Base conversion implementation. Inheritance Object BaseConversion Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Advanced.Algorithms.Binary Assembly : Advanced.Algorithms.dll Syntax public class BaseConversion Methods Convert(String, String, String, Int32) Converts base of given number to the target base. Declaration public static string Convert(string srcNumber, string srcBaseChars, string dstBaseChars, int precision = 32) Parameters Type Name Description String srcNumber Input number in source base system. String srcBaseChars Source base system characters in increasing order. For example 0123456789 for base 10. String dstBaseChars Destination base system characters in increasing order. For example 01 for base 2. Int32 precision Required precision when dealing with fractions. Defaults to 32 places. Returns Type Description String The result in target base as a string."
  },
  "api/Advanced.Algorithms.Binary.Gcd.html": {
    "href": "api/Advanced.Algorithms.Binary.Gcd.html",
    "title": "Class Gcd | Advanced Algorithms",
    "keywords": "Class Gcd GCD without division or mod operators but using substraction. Inheritance Object Gcd Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Advanced.Algorithms.Binary Assembly : Advanced.Algorithms.dll Syntax public class Gcd Methods Find(Int32, Int32) Declaration public static int Find(int a, int b) Parameters Type Name Description Int32 a Int32 b Returns Type Description Int32"
  },
  "api/Advanced.Algorithms.Binary.html": {
    "href": "api/Advanced.Algorithms.Binary.html",
    "title": "Namespace Advanced.Algorithms.Binary | Advanced Algorithms",
    "keywords": "Namespace Advanced.Algorithms.Binary Classes BaseConversion Base conversion implementation. Gcd GCD without division or mod operators but using substraction. Logarithm Logarithm calculator."
  },
  "api/Advanced.Algorithms.Binary.Logarithm.html": {
    "href": "api/Advanced.Algorithms.Binary.Logarithm.html",
    "title": "Class Logarithm | Advanced Algorithms",
    "keywords": "Class Logarithm Logarithm calculator. Inheritance Object Logarithm Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Advanced.Algorithms.Binary Assembly : Advanced.Algorithms.dll Syntax public class Logarithm Methods CalcBase10LogFloor(Int32) Declaration public static int CalcBase10LogFloor(int x) Parameters Type Name Description Int32 x Returns Type Description Int32 CalcBase2LogFloor(Int32) Declaration public static int CalcBase2LogFloor(int x) Parameters Type Name Description Int32 x Returns Type Description Int32"
  }
}
